'''
Задача-1: Написать класс, например, Worker, который должен содержать информацию
о работнике (ФИО, оклад, надбавка за напряженность).
Создать экземпляр класса и передать конкретные данные (примеры ФИО, должности,
оклад и надбавки). Оклад и надбавку передать в виде строки.
На основе строки создать атрибут income, который реализовать в виде словаря
и инкапуслировать. Словарь income должен содержать информацию об окладе и надбавке.
Применить к экземпляру
класса метод __dict__ и проверить какой будет результат применения этого метода.
А комментариях к заданию написать тип результата на русском языке.
'''

class Worker:
    def __init__(self, fio, age, price, overhead):
        self.fio = fio
        self.age = age
        self.price = price
        self.overhead = overhead
        self._income = {'price': float(price), \
                'overhead': float(overhead)
                }
    @property
    def income(self):
        return 'Оклад: {} Надбавка: {}'.format(self._income['price'], self._income['overhead'])


w1 = Worker('Собакевич Кот Соломонович', '77', '25000', '5000')
w2 = Worker('Допотопный Слон Борисович', '88', '45000', '7000')

print(w1.income)
print(w2.income)
print(w1.__dict__)
print(type(w2.__dict__))
# Тип результата: словарь


'''
Задача-2: Продолжить работу над задачей 1. Создать на основе класса Worker класс
Position (реализовать наследование). Добавить классу уникальный атрибут -
% премии к зарплате (от суммы оклада).
Создать метод расчета зарплаты с учетом только премии.
Реализовать обращение к этому атриубуту, как к свойству.
Проверить работу всей структуры на реальных данных, вывести результаты.
'''

class Position(Worker):
    def __init__(self, fio, age, price, overhead, prize):
        Worker.__init__(self, fio, age, price, overhead)
        self.prize = prize
        self._zp = {'price': float(price), 'prize': float(prize)}

    @property
    def zp(self):
        return self._zp['price'] + self._zp['prize']

    def name_age(self):
        return self.fio + ', ' + self.age + ' лет'

p1 = Position('Антонов Бон Бонбонович', '45', '35000', '3000', '5000')

print('{}, зарплата {}'.format(p1.fio, p1.zp))

'''
Задача-3: Продолжить работу над задачей 2.  Реализовать полиморфизм
использования знака + в методах 1) вывода полного имени работника и возраста
2) вычисления общего дохода работника с учетом надбавки .
Проверить работу всей структуры на реальных данных, вывести результаты.
'''

p2 = Position('Зажимов Утюг Напрягуевич', '47', '27000', '2800', '1200')

print(p2.name_age())


